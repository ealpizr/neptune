// source: proto/neptune.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.neptune.Chat', null, global);
goog.exportSymbol('proto.neptune.Message', null, global);
goog.exportSymbol('proto.neptune.Packet', null, global);
goog.exportSymbol('proto.neptune.RefreshToken', null, global);
goog.exportSymbol('proto.neptune.TestRequest', null, global);
goog.exportSymbol('proto.neptune.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neptune.TestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neptune.TestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neptune.TestRequest.displayName = 'proto.neptune.TestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neptune.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neptune.Packet.repeatedFields_, null);
};
goog.inherits(proto.neptune.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neptune.Packet.displayName = 'proto.neptune.Packet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neptune.RefreshToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neptune.RefreshToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neptune.RefreshToken.displayName = 'proto.neptune.RefreshToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neptune.Chat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neptune.Chat.repeatedFields_, null);
};
goog.inherits(proto.neptune.Chat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neptune.Chat.displayName = 'proto.neptune.Chat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neptune.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neptune.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neptune.Message.displayName = 'proto.neptune.Message';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neptune.TestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.neptune.TestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neptune.TestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.TestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neptune.TestRequest}
 */
proto.neptune.TestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neptune.TestRequest;
  return proto.neptune.TestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neptune.TestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neptune.TestRequest}
 */
proto.neptune.TestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neptune.TestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neptune.TestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neptune.TestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.TestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Message = 1;
 * @return {string}
 */
proto.neptune.TestRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.neptune.TestRequest} returns this
 */
proto.neptune.TestRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neptune.Packet.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neptune.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.neptune.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neptune.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    refreshtoken: (f = msg.getRefreshtoken()) && proto.neptune.RefreshToken.toObject(includeInstance, f),
    chatlistList: jspb.Message.toObjectList(msg.getChatlistList(),
    proto.neptune.Chat.toObject, includeInstance),
    chatitem: (f = msg.getChatitem()) && proto.neptune.Chat.toObject(includeInstance, f),
    messagelistList: jspb.Message.toObjectList(msg.getMessagelistList(),
    proto.neptune.Message.toObject, includeInstance),
    messageitem: (f = msg.getMessageitem()) && proto.neptune.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neptune.Packet}
 */
proto.neptune.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neptune.Packet;
  return proto.neptune.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neptune.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neptune.Packet}
 */
proto.neptune.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.neptune.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.neptune.RefreshToken;
      reader.readMessage(value,proto.neptune.RefreshToken.deserializeBinaryFromReader);
      msg.setRefreshtoken(value);
      break;
    case 3:
      var value = new proto.neptune.Chat;
      reader.readMessage(value,proto.neptune.Chat.deserializeBinaryFromReader);
      msg.addChatlist(value);
      break;
    case 4:
      var value = new proto.neptune.Chat;
      reader.readMessage(value,proto.neptune.Chat.deserializeBinaryFromReader);
      msg.setChatitem(value);
      break;
    case 5:
      var value = new proto.neptune.Message;
      reader.readMessage(value,proto.neptune.Message.deserializeBinaryFromReader);
      msg.addMessagelist(value);
      break;
    case 6:
      var value = new proto.neptune.Message;
      reader.readMessage(value,proto.neptune.Message.deserializeBinaryFromReader);
      msg.setMessageitem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neptune.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neptune.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neptune.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRefreshtoken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.neptune.RefreshToken.serializeBinaryToWriter
    );
  }
  f = message.getChatlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.neptune.Chat.serializeBinaryToWriter
    );
  }
  f = message.getChatitem();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.neptune.Chat.serializeBinaryToWriter
    );
  }
  f = message.getMessagelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.neptune.Message.serializeBinaryToWriter
    );
  }
  f = message.getMessageitem();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.neptune.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type Type = 1;
 * @return {!proto.neptune.Type}
 */
proto.neptune.Packet.prototype.getType = function() {
  return /** @type {!proto.neptune.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.neptune.Type} value
 * @return {!proto.neptune.Packet} returns this
 */
proto.neptune.Packet.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RefreshToken RefreshToken = 2;
 * @return {?proto.neptune.RefreshToken}
 */
proto.neptune.Packet.prototype.getRefreshtoken = function() {
  return /** @type{?proto.neptune.RefreshToken} */ (
    jspb.Message.getWrapperField(this, proto.neptune.RefreshToken, 2));
};


/**
 * @param {?proto.neptune.RefreshToken|undefined} value
 * @return {!proto.neptune.Packet} returns this
*/
proto.neptune.Packet.prototype.setRefreshtoken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.neptune.Packet} returns this
 */
proto.neptune.Packet.prototype.clearRefreshtoken = function() {
  return this.setRefreshtoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neptune.Packet.prototype.hasRefreshtoken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Chat ChatList = 3;
 * @return {!Array<!proto.neptune.Chat>}
 */
proto.neptune.Packet.prototype.getChatlistList = function() {
  return /** @type{!Array<!proto.neptune.Chat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neptune.Chat, 3));
};


/**
 * @param {!Array<!proto.neptune.Chat>} value
 * @return {!proto.neptune.Packet} returns this
*/
proto.neptune.Packet.prototype.setChatlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.neptune.Chat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neptune.Chat}
 */
proto.neptune.Packet.prototype.addChatlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.neptune.Chat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neptune.Packet} returns this
 */
proto.neptune.Packet.prototype.clearChatlistList = function() {
  return this.setChatlistList([]);
};


/**
 * optional Chat ChatItem = 4;
 * @return {?proto.neptune.Chat}
 */
proto.neptune.Packet.prototype.getChatitem = function() {
  return /** @type{?proto.neptune.Chat} */ (
    jspb.Message.getWrapperField(this, proto.neptune.Chat, 4));
};


/**
 * @param {?proto.neptune.Chat|undefined} value
 * @return {!proto.neptune.Packet} returns this
*/
proto.neptune.Packet.prototype.setChatitem = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.neptune.Packet} returns this
 */
proto.neptune.Packet.prototype.clearChatitem = function() {
  return this.setChatitem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neptune.Packet.prototype.hasChatitem = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Message MessageList = 5;
 * @return {!Array<!proto.neptune.Message>}
 */
proto.neptune.Packet.prototype.getMessagelistList = function() {
  return /** @type{!Array<!proto.neptune.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neptune.Message, 5));
};


/**
 * @param {!Array<!proto.neptune.Message>} value
 * @return {!proto.neptune.Packet} returns this
*/
proto.neptune.Packet.prototype.setMessagelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.neptune.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neptune.Message}
 */
proto.neptune.Packet.prototype.addMessagelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.neptune.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neptune.Packet} returns this
 */
proto.neptune.Packet.prototype.clearMessagelistList = function() {
  return this.setMessagelistList([]);
};


/**
 * optional Message MessageItem = 6;
 * @return {?proto.neptune.Message}
 */
proto.neptune.Packet.prototype.getMessageitem = function() {
  return /** @type{?proto.neptune.Message} */ (
    jspb.Message.getWrapperField(this, proto.neptune.Message, 6));
};


/**
 * @param {?proto.neptune.Message|undefined} value
 * @return {!proto.neptune.Packet} returns this
*/
proto.neptune.Packet.prototype.setMessageitem = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.neptune.Packet} returns this
 */
proto.neptune.Packet.prototype.clearMessageitem = function() {
  return this.setMessageitem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neptune.Packet.prototype.hasMessageitem = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neptune.RefreshToken.prototype.toObject = function(opt_includeInstance) {
  return proto.neptune.RefreshToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neptune.RefreshToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.RefreshToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    refreshtoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neptune.RefreshToken}
 */
proto.neptune.RefreshToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neptune.RefreshToken;
  return proto.neptune.RefreshToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neptune.RefreshToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neptune.RefreshToken}
 */
proto.neptune.RefreshToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neptune.RefreshToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neptune.RefreshToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neptune.RefreshToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.RefreshToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRefreshtoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string AccessToken = 1;
 * @return {string}
 */
proto.neptune.RefreshToken.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.neptune.RefreshToken} returns this
 */
proto.neptune.RefreshToken.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string RefreshToken = 2;
 * @return {string}
 */
proto.neptune.RefreshToken.prototype.getRefreshtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.neptune.RefreshToken} returns this
 */
proto.neptune.RefreshToken.prototype.setRefreshtoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neptune.Chat.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neptune.Chat.prototype.toObject = function(opt_includeInstance) {
  return proto.neptune.Chat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neptune.Chat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.Chat.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.neptune.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neptune.Chat}
 */
proto.neptune.Chat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neptune.Chat;
  return proto.neptune.Chat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neptune.Chat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neptune.Chat}
 */
proto.neptune.Chat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUsers(value);
      break;
    case 2:
      var value = new proto.neptune.Message;
      reader.readMessage(value,proto.neptune.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neptune.Chat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neptune.Chat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neptune.Chat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.Chat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.neptune.Message.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string Users = 1;
 * @return {!Array<string>}
 */
proto.neptune.Chat.prototype.getUsersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.neptune.Chat} returns this
 */
proto.neptune.Chat.prototype.setUsersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.neptune.Chat} returns this
 */
proto.neptune.Chat.prototype.addUsers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neptune.Chat} returns this
 */
proto.neptune.Chat.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated Message Messages = 2;
 * @return {!Array<!proto.neptune.Message>}
 */
proto.neptune.Chat.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.neptune.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neptune.Message, 2));
};


/**
 * @param {!Array<!proto.neptune.Message>} value
 * @return {!proto.neptune.Chat} returns this
*/
proto.neptune.Chat.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.neptune.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neptune.Message}
 */
proto.neptune.Chat.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.neptune.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neptune.Chat} returns this
 */
proto.neptune.Chat.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neptune.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.neptune.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neptune.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neptune.Message}
 */
proto.neptune.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neptune.Message;
  return proto.neptune.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neptune.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neptune.Message}
 */
proto.neptune.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neptune.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neptune.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neptune.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neptune.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string SenderID = 1;
 * @return {string}
 */
proto.neptune.Message.prototype.getSenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.neptune.Message} returns this
 */
proto.neptune.Message.prototype.setSenderid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Content = 2;
 * @return {string}
 */
proto.neptune.Message.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.neptune.Message} returns this
 */
proto.neptune.Message.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp Timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.neptune.Message.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.neptune.Message} returns this
*/
proto.neptune.Message.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.neptune.Message} returns this
 */
proto.neptune.Message.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neptune.Message.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.neptune.Type = {
  REFRESH_TOKEN: 0,
  CHAT_LIST: 1,
  CHAT_ITEM: 2,
  MESSAGE_LIST: 3,
  MESSAGE_ITEM: 4
};

goog.object.extend(exports, proto.neptune);
