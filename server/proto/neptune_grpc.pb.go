// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NeptuneClient is the client API for Neptune service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeptuneClient interface {
	Connect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Neptune_ConnectClient, error)
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetChats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type neptuneClient struct {
	cc grpc.ClientConnInterface
}

func NewNeptuneClient(cc grpc.ClientConnInterface) NeptuneClient {
	return &neptuneClient{cc}
}

func (c *neptuneClient) Connect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Neptune_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Neptune_ServiceDesc.Streams[0], "/neptune.Neptune/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &neptuneConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Neptune_ConnectClient interface {
	Recv() (*Packet, error)
	grpc.ClientStream
}

type neptuneConnectClient struct {
	grpc.ClientStream
}

func (x *neptuneConnectClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *neptuneClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neptune.Neptune/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neptuneClient) GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neptune.Neptune/GetCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neptuneClient) GetChats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neptune.Neptune/GetChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NeptuneServer is the server API for Neptune service.
// All implementations must embed UnimplementedNeptuneServer
// for forward compatibility
type NeptuneServer interface {
	Connect(*emptypb.Empty, Neptune_ConnectServer) error
	Test(context.Context, *TestRequest) (*emptypb.Empty, error)
	GetCurrentUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetChats(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedNeptuneServer()
}

// UnimplementedNeptuneServer must be embedded to have forward compatible implementations.
type UnimplementedNeptuneServer struct {
}

func (UnimplementedNeptuneServer) Connect(*emptypb.Empty, Neptune_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedNeptuneServer) Test(context.Context, *TestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedNeptuneServer) GetCurrentUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedNeptuneServer) GetChats(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChats not implemented")
}
func (UnimplementedNeptuneServer) mustEmbedUnimplementedNeptuneServer() {}

// UnsafeNeptuneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeptuneServer will
// result in compilation errors.
type UnsafeNeptuneServer interface {
	mustEmbedUnimplementedNeptuneServer()
}

func RegisterNeptuneServer(s grpc.ServiceRegistrar, srv NeptuneServer) {
	s.RegisterService(&Neptune_ServiceDesc, srv)
}

func _Neptune_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NeptuneServer).Connect(m, &neptuneConnectServer{stream})
}

type Neptune_ConnectServer interface {
	Send(*Packet) error
	grpc.ServerStream
}

type neptuneConnectServer struct {
	grpc.ServerStream
}

func (x *neptuneConnectServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func _Neptune_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeptuneServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neptune.Neptune/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeptuneServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Neptune_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeptuneServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neptune.Neptune/GetCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeptuneServer).GetCurrentUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Neptune_GetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeptuneServer).GetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neptune.Neptune/GetChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeptuneServer).GetChats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Neptune_ServiceDesc is the grpc.ServiceDesc for Neptune service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Neptune_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neptune.Neptune",
	HandlerType: (*NeptuneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Neptune_Test_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _Neptune_GetCurrentUser_Handler,
		},
		{
			MethodName: "GetChats",
			Handler:    _Neptune_GetChats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Neptune_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/neptune.proto",
}
